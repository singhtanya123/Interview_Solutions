//object has argyments as arrays. //callback hell
let stock = {
  Fruits: ["pineapple", "grapes", "strawberry", "kiwi"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "candies"]
};
/*pending
        resolve   reject*/
let is_shop_open = true;

let order = (time, work) => {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(() => {
        resolve(work());
      }, time);
    } else {
      reject(console.log("Shop is closed"));
    }
  });
};

order(2, () => {
  console.log(`${stock.Fruits[0]}`);
}) /*if the statement is in one line no brackets needed. otherwise yes. 
    //for promise chaining you have to have .then .then .then
     no semicolon after then otherwise it won't work and mention return in it*/
  .then(() => {
    return order(0000, () => {
      console.log("Production is started.");
    });
  })

  .then(() => {
    return order(2000, () => {
      console.log("Fruits are chopped.");
    });
  })

  .then(() => {
    return order(1000, () => {
      console.log(`${stock.liquid[0]} and ${stock.liquid[1]} mixed`);
    });
  })

  .then(() => {
    return order(1000, () => {
      console.log("start the machine");
    });
  })

  .then(() => {
    return order(2000, () => {
      console.log(`ice cream place on ${stock["holder"][0]}`);
    });
  })

  .then(() => {
    return order(3000, () => {
      console.log(`${stock["toppings"][0]} on ice cream placed`);
    });
  })

  .then(() => {
    return order(1000, () => {
      console.log("ice crean served");
    });
  })

  .catch(() => {
    console.log("Bad luck");
  })

  .finally(() => {
    console.log("open at btw 12-18");
  });
